



========================CHAPTER 3
SUMMARIZING DATA
(with aggregate functions) Aggregate function performs a calcultion on several values and returns a single value. Aggregate functions come after SELECT statement.
AVG() and SUM() are used for numarical fields. While COUNT(), MIN(), MAX() are used for non numerical fields
Aggregate functions { COUNT(), AVG(), SUM(), MIN(), MAX() }
--------------------------------------------
SELECT AVG(budget)
FROM films

SELECT SUM(budget)
FROM films

SELECT MIN(budget)
FROM films

SELECT MAX(budget)
FROM films


NON-NUMERICAL DATA (various data types)
---------------------------------
SELECT MIN(country)
FROM films;

SELECT MAX(country)
FROM films;

SELECT MIN(country) AS minimum_country
FROM films;

-- Query the sum of film durations
SELECT SUM(duration) AS total_duration
FROM films;

-- Calculate the average duration of all films
SELECT AVG(duration) AS average_duration
FROM films;

-- Find the latest release_year / most recent year
SELECT MAX(release_year) AS latest_year
FROM films;

-- Find the duration of the shortest film
SELECT MIN(duration) AS shortest_film
FROM films;


SUMMARIZING SUBSETS
(using WHERE with aggregate functions)
------------------------------------
SELECT AVG(budget) AS avg_budget
FROM films
WHERE release_year >= 2010;

SELECT SUM(budget) AS sum_budget
FROM films
WHERE release_year = 2010;

SELECT MIN(budget) AS min_budget
FROM films
WHERE release_year = 2010;

SELECT MAX(budget) AS MAX_budget
FROM films
WHERE release_year = 2010;

SELECT COUNT(budget) AS count_budget
FROM films
WHERE release_year = 2010;


ROUND() == rounds numbers to specified decimal
ROUND(number_to_round, decimal_places)
---------------------------------------------
-----rounding to a decimal place
SELECT ROUND(AVG(budget), 2) AS avg_budget
FROM films
WHERE release_year >= 2010;

-----rounding to a whole number
SELECT ROUND(AVG(budget)) AS avg_budget
FROM films
WHERE release_year >= 2010;
		*OR*
SELECT ROUND(AVG(budget), 0) AS avg_budget
FROM films
WHERE release_year >= 2010;



ROUND() using negative parameters
-------------------------------
-----round using negative parameters
SELECT ROUND(AVG(budget), -5) AS avg_budget
FROM films
WHERE release_year >= 2010;

-- Calculate the sum of gross from the year 2000 or later
SELECT SUM(gross) AS total_gross
FROM films
WHERE release_year >= 2000;

-- Calculate the average gross of films that start with A
SELECT AVG(gross) AS avg_gross_A
FROM films
WHERE title LIKE 'A%';

-- Calculate the lowest gross film in 1994
SELECT MIN (gross) AS lowest_gross
FROM films
WHERE release_year = 1994;

-- Calculate the highest gross film released between 2000-2012
SELECT MAX (gross) AS highest_gross
FROM films
WHERE release_year BETWEEN 2000 AND 2012;

-- Round the average number of facebook_likes to one decimal place
SELECT ROUND (AVG (facebook_likes), 1) AS avg_facebook_likes
FROM reviews;

-- Calculate the average budget rounded to the thousands
SELECT ROUND (AVG (budget), -3) AS avg_budget_thousands
FROM films;



ALIASING AND ARITHMETIC
(+, -, *, /)
--------------------------------------------------------
SELECT (4 + 3);

SELECT (4 - 3);

SELECT (4 / 3);		OR	SELECT (4.0 / 3.0);**toget decimals instead of integer  

SELECT (4 * 3);


ALIASING WITH ARITHMETIC 
Aggregate functions VS Arithmetic functions
(Aggregate functions perform operations on a field vertically WHILE
Arithmetic functions perform operations on a field horizontally)
ORDER OF EXECUTION (FROM, WHERE, SELECT(aliases are defined here), LIMIT)
---------------------------------------------------------------
SELECT (gross - budget)
FROM films;

SELECT budget AS max_budget
FROM films
WHERE max_budget IS not NULL;


ALIASING WITH FUNCTIONS
--------------------------
-- Calculate the title and duration_hours from films, since duration are in minutes, find them in hours
SELECT title, duration/60.0 AS duration_hours
FROM films;

-- Calculate the percentage of people who are no longer alive
SELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead
FROM people;

-- Find the number of decades in the films table. Find how many decades (period of ten years) the films table covers by using MIN() and MAX(); alias as number_of_decades.
SELECT (MAX(release_year) - MIN(release_year)) / 10.0 AS number_of_decades
FROM films;

-- Round duration_hours to two decimal places. ROUND around the calculation and round to two decimal places.
SELECT  title, ROUND(duration / 60.0 ,2) AS duration_hours
FROM films;






========================CHAPTER 4
SORTING RESULTS
(ORDER BY,  )
----------------------------------
SELECT title, budget
FROM films
ORDER BY budget;

SELECT title, budget
FROM films
ORDER BY budget ASC;

SELECT title, budget
FROM films
ORDER BY budget DESC;

SELECT title, budget
FROM films
WHERE budget IS NOT NULL
ORDER BY budget DESC;

-- Select name from people and sort alphabetically
SELECT name
FROM people
ORDER BY name ;


ORDER BY multiple fields
(ORDER BY field_one, field_two | Think of field two as a tie-breaker)
------------------------------------
====ORDER BY field_one, field_two
SELECT title, wins
FROM best_movies
ORDER BY wins DESC;

====Think of field two as a tie-breaker
SELECT title, wins, imdb_score
FROM best_movies
ORDER BY wins DESC, imdb_score DESC;

-- Select the title and duration from longest to shortest film
SELECT title, duration
FROM films
ORDER BY duration;

SELECT birthdate, name
FROM people
ORDER BY birthdate, name DESC;

-- Select the release year, duration, and title sorted by release year and duration
SELECT release_year, duration, title
FROM films
ORDER BY release_year, duration;

-- Select the certification, release year, and title sorted by certification and release year
SELECT certification, release_year, title
FROM films
ORDER BY certification, release_year;


GROUPING DATA
GROUP BY single fields(GROUP BY is commonly used with aggregate functions to provide summary statistics, particularly when only grouping a single field, "certification", and selecting multiple "fields, certification and title". This is because the aggregate function will reduce the non-grouped field to one record only, which will need to correspond to one group.)
------------------------------------
SELECT certification, COUNT(title) AS title_count
FROM films
GROUP BY certification;


GROUP BY multiple fields
---------------------------------------
SELECT certification, language, COUNT(title) AS title_count
FROM films
GROUP BY certification, language;


GROUP BY with ORDER BY (ORDER BY is always after GROUP BY)
[ORder of execution = SELECT, FROM, GROUP BY, ORDER BY)
-------------------------------------
SELECT certification COUNT(title) AS title_count
FROM films
GROUP BY certification
ORDER BY title_count DESC;

-- Find the release_year and film_count of each year. Select the release_year and count of films released in each year aliased as film_count.
SELECT release_year, COUNT(films) AS film_count
FROM films
GROUP BY release_year

-- Find the release_year, country, and max_budget, then group and order by release_year and country
SELECT release_year, country, MAX (budget) AS max_budget
FROM films
GROUP BY release_year, country

=======Answering business questions===========
In the real world, every SQL query starts with a business question. Then it is up to you to decide how to write the query that answers the question. Let's try this out.

Which release_year had the most language diversity?

Take your time to translate this question into code. We'll get you started then it's up to you to test your queries in the console.

"Most language diversity" can be interpreted as COUNT(DISTINCT ___). Now over to you.

===
SELECT release_year, COUNT(DISTINCT language) AS count_language
FROM films
GROUP BY release_year
ORDER BY count_language DESC;

OR 

===
SELECT 
        release_year,
        COUNT(DISTINCT language) lang
    FROM films
    GROUP BY release_year

ORDER BY lang DESC;



FILTERING GROUPED DATA
(HAVING) NB: because of the order of execution, we cannot use alias with having, but we can with ORDER BY)
-----------------------------------
SELECT
	release_year
	COUNT(title) AS title_count
FROM films
GROUP BY release_year
HAVING COUNT(title) > 100
ORDER BY title_count DESC
LIMIT 3;


HAVING vs WHERE
------------------------------------------
-- What questions were written in the year 2000?
SELECT title
FROM films
WHERE release_year = 2000;

-- In what year was the average film direction over 2 hours?
SELECT release_year
FROM films
GROUP BY release_year
HAVING AVG(duration) > 120;

========Instructions=========
100 XP
Select country from the films table, and get the distinct count of certification aliased as certification_count.
Group the results by country.
Filter the unique count of certifications to only results greater than 10.
===
SELECT country, COUNT(DISTINCT certification) AS certification_count
FROM films
GROUP BY country
HAVING COUNT(DISTINCT certification) > 10;


==============Instructions============
100 XP
Select the country and the average budget as average_budget, rounded to two decimal, from films.
Group the results by country.
Filter the results to countries with an average budget of more than one billion (1000000000).
Sort by descending order of the average_budget.
===
-- Select the country and average_budget from films
SELECT country, AVG(budget) AS average_budget
FROM films
-- Group by country
GROUP BY country
-- Filter to countries with an average_budget of more than one billion
HAVING AVG(budget) > 1000000000
-- Order by descending order of the aggregated budget
ORDER BY AVG(budget) DESC


-- Select the release_year for films released after 1990 grouped by year
SELECT release_year
FROM films
WHERE release_year > 1990
GROUP BY release_year


-- Modify the query to also list the average budget and average gross
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year;
-- Modify the query to see only years with an avg_budget of more than 60 million
HAVING  AVG(budget) > 60000000;
-- Order the results from highest to lowest average gross and limit to one
ORDER BY AVG(gross) DESC
LIMIT 1;




\\\\\\\\\\\\\\\\\\\\\\\\\
2. What you've learned
00:07 - 00:42
Our SQL vocabulary expanded by introducing the keywords COUNT and LIMIT in chapter one. We saw filtering techniques and IS NULL and IS NOT NULL in chapter two. We discussed ROUND and aggregate functions in chapter three, ORDER BY, DESC, GROUP BY, and HAVING in chapter four. We also covered comparison operators and arithmetic throughout.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


======================================================
======================================================
www.sqlstyle.guide
